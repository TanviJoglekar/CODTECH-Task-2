import tkinter as tk
from tkinter import messagebox, ttk
import hashlib


# User Authentication
class Authentication:
    def __init__(self):
        self.users = {"admin": hashlib.sha256("password".encode()).hexdigest()}  # Predefined user

    def validate_user(self, username, password):
        hashed_password = hashlib.sha256(password.encode()).hexdigest()
        return self.users.get(username) == hashed_password


# Inventory Management System
class InventoryManagement:
    def __init__(self):
        self.inventory = {}  # Dictionary to store products

    def add_product(self, product_id, name, quantity, price):
        if product_id in self.inventory:
            return "Product ID already exists."
        self.inventory[product_id] = {"name": name, "quantity": quantity, "price": price}
        return "Product added successfully."

    def edit_product(self, product_id, name, quantity, price):
        if product_id not in self.inventory:
            return "Product ID does not exist."
        self.inventory[product_id] = {"name": name, "quantity": quantity, "price": price}
        return "Product updated successfully."

    def delete_product(self, product_id):
        if product_id not in self.inventory:
            return "Product ID does not exist."
        del self.inventory[product_id]
        return "Product deleted successfully."

    def generate_low_stock_report(self, threshold=5):
        low_stock = [
            f"ID: {pid}, Name: {info['name']}, Quantity: {info['quantity']}"
            for pid, info in self.inventory.items()
            if info["quantity"] < threshold
        ]
        return low_stock if low_stock else ["No low-stock products."]

    def generate_sales_summary(self):
        total_value = sum(info["quantity"] * info["price"] for info in self.inventory.values())
        return f"Total Inventory Value: ${total_value:.2f}"


# GUI Implementation
class InventoryGUI:
    def __init__(self):
        self.auth = Authentication()
        self.inventory = InventoryManagement()
        self.window = tk.Tk()
        self.window.title("Inventory Management System")
        self.login_screen()

    def login_screen(self):
        self.clear_window()
        tk.Label(self.window, text="Username:").grid(row=0, column=0, padx=10, pady=5)
        tk.Label(self.window, text="Password:").grid(row=1, column=0, padx=10, pady=5)
        username = tk.Entry(self.window)
        password = tk.Entry(self.window, show="*")
        username.grid(row=0, column=1, padx=10, pady=5)
        password.grid(row=1, column=1, padx=10, pady=5)
        tk.Button(
            self.window,
            text="Login",
            command=lambda: self.validate_login(username.get(), password.get()),
        ).grid(row=2, column=0, columnspan=2, pady=10)

    def validate_login(self, username, password):
        if self.auth.validate_user(username, password):
            self.main_screen()
        else:
            messagebox.showerror("Error", "Invalid Username or Password")

    def main_screen(self):
        self.clear_window()
        tk.Label(self.window, text="Inventory Management System", font=("Arial", 16)).grid(row=0, column=0, columnspan=3, pady=10)

        tk.Button(self.window, text="Add Product", command=self.add_product_screen).grid(row=1, column=0, padx=10, pady=10)
        tk.Button(self.window, text="Edit Product", command=self.edit_product_screen).grid(row=1, column=1, padx=10, pady=10)
        tk.Button(self.window, text="Delete Product", command=self.delete_product_screen).grid(row=1, column=2, padx=10, pady=10)
        tk.Button(self.window, text="Low Stock Report", command=self.low_stock_report).grid(row=2, column=0, padx=10, pady=10)
        tk.Button(self.window, text="Sales Summary", command=self.sales_summary).grid(row=2, column=1, padx=10, pady=10)
        tk.Button(self.window, text="Exit", command=self.window.quit).grid(row=2, column=2, padx=10, pady=10)

    def add_product_screen(self):
        self.clear_window()
        self.product_form("Add Product", self.inventory.add_product)

    def edit_product_screen(self):
        self.clear_window()
        self.product_form("Edit Product", self.inventory.edit_product)

    def delete_product_screen(self):
        self.clear_window()
        tk.Label(self.window, text="Product ID:").grid(row=0, column=0, padx=10, pady=5)
        product_id = tk.Entry(self.window)
        product_id.grid(row=0, column=1, padx=10, pady=5)
        tk.Button(
            self.window,
            text="Delete",
            command=lambda: self.handle_action(self.inventory.delete_product(product_id.get())),
        ).grid(row=1, column=0, columnspan=2, pady=10)

    def low_stock_report(self):
        report = self.inventory.generate_low_stock_report()
        messagebox.showinfo("Low Stock Report", "\n".join(report))

    def sales_summary(self):
        summary = self.inventory.generate_sales_summary()
        messagebox.showinfo("Sales Summary", summary)

    def product_form(self, title, action):
        tk.Label(self.window, text=title, font=("Arial", 14)).grid(row=0, column=0, columnspan=2, pady=10)
        tk.Label(self.window, text="Product ID:").grid(row=1, column=0, padx=10, pady=5)
        tk.Label(self.window, text="Name:").grid(row=2, column=0, padx=10, pady=5)
        tk.Label(self.window, text="Quantity:").grid(row=3, column=0, padx=10, pady=5)
        tk.Label(self.window, text="Price:").grid(row=4, column=0, padx=10, pady=5)

        product_id = tk.Entry(self.window)
        name = tk.Entry(self.window)
        quantity = tk.Entry(self.window)
        price = tk.Entry(self.window)

        product_id.grid(row=1, column=1, padx=10, pady=5)
        name.grid(row=2, column=1, padx=10, pady=5)
        quantity.grid(row=3, column=1, padx=10, pady=5)
        price.grid(row=4, column=1, padx=10, pady=5)

        tk.Button(
            self.window,
            text="Submit",
            command=lambda: self.handle_action(
                action(product_id.get(), name.get(), int(quantity.get()), float(price.get()))
            ),
        ).grid(row=5, column=0, columnspan=2, pady=10)

    def handle_action(self, message):
        messagebox.showinfo("Info", message)
        self.main_screen()

    def clear_window(self):
        for widget in self.window.winfo_children():
            widget.destroy()

    def run(self):
        self.window.mainloop()


if __name__ == "__main__":
    app = InventoryGUI()
    app.run()
